require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/web/v1/rental_listings", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # RentalListing. As you add validations to RentalListing, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      unique_id: 1,
      name: "Test Listing",
      address: "123 Main St",
      apartment_number: "1A",
      rent: 100000,
      floor_area: 1000,
      building_type: :apartment,
    }
  }

  let(:invalid_attributes) {
    {
      unique_id: 2,
      name: "Test Listing",
      address: "123 Main St",
      apartment_number: "1A",
      building_type: 4,
      rent: 100000,
      floor_area: 0,
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # Api::Web::V1::RentalListingsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "POST /create" do
    context "with valid CSV file" do
      it "creates new RentalListings from CSV" do
        file = fixture_file_upload('valid_rental_listings.csv', 'text/csv')

        expect {
          post api_web_v1_rental_listings_url,
               params: { file: file },
               headers: valid_headers
        }.to change(RentalListing, :count).by(3)
      end

      it "renders a success message" do
        file = fixture_file_upload('valid_rental_listings.csv', 'text/csv')

        post api_web_v1_rental_listings_url,
             params: { file: file },
             headers: valid_headers

        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(JSON.parse(response.body)).to include("message" => "Bulk upsert completed successfully")
      end

      it "updates existing records based on unique_id" do
        # First create a record
        file = fixture_file_upload('valid_rental_listings.csv', 'text/csv')
        post api_web_v1_rental_listings_url,
             params: { file: file },
             headers: valid_headers

        # Then update the same record with modified data
        updated_file = fixture_file_upload('updated_rental_listing.csv', 'text/csv')

        expect {
          post api_web_v1_rental_listings_url,
               params: { file: updated_file },
               headers: valid_headers
        }.to change(RentalListing, :count).by(0)

        updated_listing = RentalListing.find_by(unique_id: "1")
        expect(updated_listing.name).to eq("シーサイドアパート改")
        expect(updated_listing.rent).to eq(200000)
      end
    end

    context "with invalid CSV file" do
      it "returns error when no file is provided" do
        post api_web_v1_rental_listings_url,
             params: {},
             headers: valid_headers

        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("error" => "No file provided")
      end

      it "returns error when file is not a CSV" do
        file = fixture_file_upload('valid_rental_listings.csv', 'text/plain')

        post api_web_v1_rental_listings_url,
             params: { file: file },
             headers: valid_headers

        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("error" => "File must be a CSV")
      end

      it "returns error for invalid building type" do
        file = fixture_file_upload('invalid_building_type.csv', 'text/csv')

        post api_web_v1_rental_listings_url,
             params: { file: file },
             headers: valid_headers

        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("error" => "Invalid building type: 無効な種類")
      end

      it "returns error for malformed CSV" do
        file = fixture_file_upload('malformed.csv', 'text/csv')

        post api_web_v1_rental_listings_url,
             params: { file: file },
             headers: valid_headers

        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to include("error" => "Invalid CSV format")
      end
    end
  end
end
